import { getServerAddress } from "./localStorage"

export const sendFiles = (
    files: File[],
    setFiles: React.Dispatch<React.SetStateAction<File[]>>,
    setLocalFiles: React.Dispatch<React.SetStateAction<never[]>>
) => {
    const formData: FormData = new FormData()

    files.map((file: Blob, index) => {
        formData.append(`${ file.type }-${ index }`, file)
    })

    fetch(getServerAddress(`/send-file?user_name=${ localStorage.getItem("name") }`), {
        // This request doesn't include "content type" header, because the content type needs to be
        // generated by the browser, so the browser can include the multipart boundary and content type dynamically.
        // If the header is added the backend will return a response with "Bad Request" status.
        // Makes sense considering that Postman uses "multipart/form-data; boundary=<calculated when request is sent>" header.
        method: "POST",
        body: formData
    })
    .then(response => {
        if (response.ok) {
            setFiles([])
            getLocalFiles(setLocalFiles)
            console.log("File sent successfully")
        }

        else console.log("Sending the file failed")
    })
    .catch(error => console.log("Error occured while sending the file", error))
}

export const getLocalFiles = (setLocalFiles: React.Dispatch<React.SetStateAction<never[]>>) => {
    fetch(getServerAddress(`/local-files?user_name=${ localStorage.getItem("name") }`))
        .then(response => {
            if (response.ok) {
                response.json()
                    .then(content => {
                        console.log(content)
                        setLocalFiles(content.files)
                    })
                    .catch(error => console.log("Failed to fetch local files", error))
            }

            else console.log("Fetching local files failed")
        })
        .catch(error => console.log("Error occured while fetching local files", error))
}

export const deleteFile = (filename: string, setLocalFiles: React.Dispatch<React.SetStateAction<never[]>>) => {
    fetch(getServerAddress(`/local-file?file_name=${ filename }&user_name=${ localStorage.getItem("name") }`), {
        method: "DELETE"
    })
    .then(response => {
        if (response.ok) {
            response.json()
                .then(data => {
                    if (typeof data === "object") {
                        console.log("File removed successfully")
                    }

                    getLocalFiles(setLocalFiles)
                })
                .catch(error => console.log(error))
        }

        else console.log(`Removing '${ filename }' file failed`)
    })
    .catch(error => console.log("Error occured while removing a file:", error))
}